import time

import httpx
from sqlalchemy.exc import SQLAlchemyError

from ..core.config import settings
from datetime import datetime

from fastapi import Depends, HTTPException

from sqlalchemy.orm import Session

from ..models.comment import Comment as CommentModel


class AutoReplyToCommentService:
    """
    Service, that handles auto-reply feature. Called in comment creation, if author of the post
    enabled this feature.

    Sends post content and comment content to OpenAI API to create new comment content,
    and adds resulting comment to database after given delay.
    """
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.openai.com/v1/chat/completions"
        self.model = "gpt-3.5-turbo"

    async def get_reply_string(
            self,
            post_content: str,
            comment_to_reply_content: str
    ) -> str:
        """
        Create new comment content by making LLM call
        :param post_content: Content of the post to process by LLM
        :param comment_to_reply_content: Content of comment to reply to process by LLM
        :return: String with new comment content
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }
        # Prepare the prompt
        prompt = (
            f"Post content: {post_content}\n\n"
            f"Comment to reply: {comment_to_reply_content}\n\n"
            "Reply:"
        )

        data = {
            "model": self.model,
            "messages": [
                {"role": "system", "content": """
                With provided post content and comment content, your goal is to reply to provided comment from the side
                of post author. Imitate post author style as much as possible, keep your answer related to comment and
                post. Reply only with text of new comment content. If it's not enough information to answer comment,
                pretend that you know it. Add \\n symbol when putting newline.
                
                Examples:
                Input:

                Post Content: Hi guys I've just brought Honda Civic EK9! I'm soo excited rn, I'm gonna go drive it all day!
                Comment to reply: Yo that's cool! Does it have vtec?

                Your answer:
                Yeah mate, it's B16B engine with vtec. Gonna redline it! 
                               
                Input:
                Post content: Hi everyone! Our burger cafe is finally open! Waiting for you!
                Comment to reply: That's wonderful! Do you have options for vegans?
                
                Your answer:
                Yes, we do! We have vegan patty burgers, salads and more.
                
                """},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 150
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(self.base_url, json=data, headers=headers)
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"].strip()

    async def reply_with_delay(
            self,
            delay_min: int,
            reply_comment_str: str,
            author_id: str,
            post_id: str,
            db: Session,
    ):
        """
        Wait for specified amount of time and save generated by LLM comment into database.
        :param delay_min: Delay time, in minutes
        :param reply_comment_str: Content of generated by LLM comment
        :param author_id: Id of author of the post and comment
        :param post_id: ID of post
        :param db: Current database Session object
        :return:
        """

        time.sleep(delay_min * 60)

        try:
            db_comment = CommentModel(
                content=reply_comment_str,
                created_at=datetime.now(),
                owner_id=author_id,
                post_id=post_id
            )

            db.add(db_comment)
            db.commit()
        except SQLAlchemyError as e:
            raise HTTPException(status_code=500,
                                detail=f"An error occurred while trying to save delayed comment for {post_id}: {e}")


auto_reply_to_comment_service = AutoReplyToCommentService(api_key=settings.OPENAI_API_KEY)
